package superviseur
public

-- Définition application superviseur
system application
end application;

system implementation application.impl
	subcomponents
		p: process principal.impl;
end application.impl;

process principal
	features
		connectServer: in event port;
		inputStream: in event data port;
		outputStream: out event data port;
		console: out event data port;
		response: in event data port;
		ordre: out event data port;
		picture: in data port;
		reset: out event port;
end principal;

process implementation principal.impl
		subcomponents
			th_server: thread th_server;
			th_sendToMon: thread th_sendToMon;
			th_startRobot: thread th_startRobot;
			th_openComRobot: thread th_openComRobot;
			th_receiveFromMon: thread th_receiveFromMon;
			th_move: thread th_move;
			th_battery: thread th_battery;
			th_startCamera: thread th_startCamera;
			th_pictures: thread th_pictures;
			th_cleaner: thread th_cleaner;
			robotStarted: data;
			move: data;
			comFails: data;
			cameraStarted: data;
			locate: data;
		connections
			CS1: port connectServer -> th_server.connectServer;
			SR1: port th_receiveFromMon.startRobot -> th_startRobot.startRobot;
			SM1: port th_receiveFromMon.startCamera -> th_startCamera.startCamera;
			IS1: port inputStream -> th_receiveFromMon.inputStream;
			OS1: port th_sendToMon.outputStream -> outputStream;
			SO1: port  th_server.serverOk -> th_sendToMon.serverOk;
			SO2: port th_server.serverOk -> th_receiveFromMon.serverOk;
			OCR: port th_receiveFromMon.openComRobot -> th_openComRobot.openComRobot;
			MTM1: port th_startRobot.messageToMon -> th_sendToMon.messageToMon;
			MTM2: port th_openComRobot.messageToMon -> th_sendToMon.messageToMon;
			MTM3: port th_battery.messageToMon -> th_sendToMon.messageToMon;
			MTM4: port th_startCamera.messageToMon -> th_sendToMon.messageToMon;
			MTM5: port th_pictures.messageToMon -> th_sendToMon.messageToMon;		
			RES1: port response -> th_startRobot.response;
			RES2: port response -> th_battery.response;
			RES3: port response -> th_move.response;
			ORD1: port th_startRobot.ordre -> ordre;
			ORD2: port th_move.ordre -> ordre;
			ORD3: port th_battery.ordre -> ordre;
			PIC: port picture -> th_pictures.picture;
			RCM: port th_startRobot.resetCom -> th_openComRobot.resetCom;
			PA: port th_receiveFromMon.probeArena -> th_pictures.probeArena;
			VA: port th_receiveFromMon.validationArena -> th_pictures.validationArena;
			CON: port th_cleaner.console -> console;
			RST: port th_cleaner.reset -> reset;
			SKO1: port th_receiveFromMon.serverKo -> th_cleaner.serverKo;
			SKO2: port th_sendToMon.serverKo -> th_cleaner.serverKo;
			DM1: data access th_receiveFromMon.move <-> move;
			DM2: data access th_move.move <-> move;
			CFP1: data access th_startRobot.comFails <-> comFails;
			CFP2: data access th_move.comFails <-> comFails;
			CFP3: data access th_battery.comFails <-> comFails;
			CFP4: data access th_cleaner.comFails <-> comFails;
			DRS1: data access th_move.robotStarted <-> robotStarted;
			DRS2: data access th_startRobot.robotStarted <-> robotStarted;
			DRS3: data access th_battery.robotStarted <-> robotStarted;
			DRS4: data access th_cleaner.robotStarted <-> robotStarted;
			DCS1: data access th_startCamera.cameraStarted <-> cameraStarted;
			DCS2: data access th_pictures.cameraStarted <-> cameraStarted;
			DCS3: data access th_cleaner.cameraStarted <-> cameraStarted;
			LOC1: data access th_receiveFromMon.locate <-> locate;
			LOC2: data access th_pictures.locate <-> locate;
	end principal.impl;
	
-- Définition threads du processus principal
-- Thread server
thread th_server
	features
		connectServer: in event port;
		serverOk: out event port;
	properties
		Dispatch_protocol => Aperiodic;
end th_server;

thread implementation th_server.impl
end th_server.impl;

-- Thread cleaner
thread th_cleaner
	features
		reset: out event port;
		console: out event data port;
		serverKo: in event port;
		cameraStarted: requires data access;
		robotStarted: requires data access;
		comFails: requires data access;
	properties
		Dispatch_protocol => Aperiodic;
end th_cleaner;

thread implementation th_cleaner.impl
end th_cleaner.impl;

-- Thread sendToMon
thread th_sendToMon
	features
		serverOk: in event port;
		outputStream: out event data port;
		messageToMon: in event data port;
		serverKo: out event port;
	properties
		Dispatch_protocol => Aperiodic;
end th_sendToMon;

thread implementation th_sendToMon.impl
end th_sendToMon.impl;

-- Thread openComRobot
thread th_openComRobot
	features
			openComRobot: in event port;
			messageToMon: out event data port;
			resetCom: in event port;
	properties
		Dispatch_protocol => Aperiodic;
end th_openComRobot;

thread implementation th_openComRobot.impl
end th_openComRobot.impl;

-- Thread startCamera
thread th_startCamera
	features
			startCamera: in event port;
			messageToMon: out event data port;
			cameraStarted: requires data access;
	properties
		Dispatch_protocol => Aperiodic;
end th_startCamera;

thread implementation th_startCamera.impl
end th_startCamera.impl;

-- Thread th_pictures
thread th_pictures
	features
		messageToMon: out event data port;
		picture: in data port;
		probeArena: in event port;
		validationArena: in event data port;
		cameraStarted: requires data access;
		locate: requires data access;
	properties
		Dispatch_protocol => Periodic;
		Period => 100 ms;	
end th_pictures;

thread implementation th_pictures.impl
end th_pictures.impl;

-- Thread receiveFromMon
thread th_receiveFromMon
	features
		serverOk: in event port;
		openComRobot: out event port;
		startRobot: out event data port;
		startCamera: out event port;
		inputStream: in event data port;
		probeArena: out event port;
		validationArena: out event data port;
		serverKo: out event port;
		move: requires data access;
		locate: requires data access;
	properties
		Dispatch_protocol => Aperiodic;
end th_receiveFromMon;

thread implementation th_receiveFromMon.impl
end th_receiveFromMon.impl;

-- Thread th_startRobot
thread th_startRobot
	features
		startRobot: in event data port;
		messageToMon: out event data port;
		response: in event data port;
		ordre: out event data port;
		robotStarted: requires data access;
		comFails: requires data access;
		resetCom: out event port;
	properties
		Dispatch_protocol => Hybrid;
		Period => 100ms;
end th_startRobot;

thread implementation th_startRobot.impl
end th_startRobot.impl;

-- Thread th_move
thread th_move
	features
		ordre: out event data port;
		response: in event data port;
		move: requires data access;
		robotStarted: requires data access;
		comFails: requires data access;
	properties
		Dispatch_protocol => Periodic;
		Period => 100 ms;	
end th_move;

thread implementation th_move.impl
end th_move.impl;

-- Thread th_battery
thread th_battery
	features
		messageToMon: out event data port;
		ordre: out event data port;
		response: in event data port;
		robotStarted: requires data access;
		comFails: requires data access;
	properties
		Dispatch_protocol => Periodic;
		Period => 500 ms;
end th_battery;

thread implementation th_battery.impl
end th_battery.impl;
end superviseur;
